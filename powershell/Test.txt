function Test-PsRemoting {
    <#
    .SYNOPSIS
    Tests PowerShell remoting to a specified computer.

    .DESCRIPTION
    This function attempts to execute a remote PowerShell command to verify that remoting is properly set up and accessible with the provided credentials.

    .PARAMETER computername
    The name of the computer to which you want to test remoting.

    .PARAMETER creds
    The credentials object to use when attempting the remote command.

    .EXAMPLE
    Test-PsRemoting -computername "Server01" -creds (Get-Credential)

    This example tests PSRemoting to "Server01" using the provided credentials.
    #>
    param(
        [Parameter(Mandatory = $true, Position=0)]
        [string]$computername, # Specifies the target computer name.

        [Parameter(Mandatory = $true, Position=1)]
        [pscredential]$creds # Specifies the credentials to use.
    )
    
    # Initialize an error log path variable. You should define the path where you want the errors to be logged.
    $ErrorLog = ######### ADD Path

    try {
        # Setting error action preference to Stop to catch the errors in try-catch block.
        $errorActionPreference = "Stop"

        # Execute a dummy command on the remote computer to test remoting.
        $result = Invoke-Command -ComputerName $computername -Credential $creds { 1 }
    } catch {
        # Capturing the error message and line number.
        $ErrorMessage = $_.Exception.Message
        $ErrorLine = $_.InvocationInfo.ScriptLineNumber
        $Time = Get-Date

        # Writing to log file.
        "$Time : Line: $ErrorLine Error: $ErrorMessage" | Out-File $ErrorLog -Append

        # Returning $false to indicate failure.
        return $false
    }

    # If the result is not as expected, log the error.
    if ($result -ne 1) {
        $ErrorMessage = "Remoting to $computerName returned an unexpected result."
        $ErrorLine = $_.InvocationInfo.ScriptLineNumber

        # Writing to log file.
        "$Time : Line: $ErrorLine Error: $ErrorMessage" | Out-File $ErrorLog -Append

        # Returning $false to indicate failure.
        return $false
    }

    # If everything goes well, return $true to indicate success.
    return $true
}






# Define the path to the configuration files
$ConfigPath = Join-Path $PSScriptRoot "config"

$ConfigFilePath = Join-Path $ConfigPath "SchedConfig.csv"

# Read the CSV file into an array
$Configs = Get-Content -Path $ConfigFilePath

# Create a hashtable to store the results for InBoxQueue
$InBoxes = @{}

# Loop through 14 iterations (assuming there are 14 configurations)
for ($i = 0; $i -lt 14; $i++) {
    # Read the current configuration from the array
    $config = $Configs[$i].split(',')
    $schedFQDN = "BDSECMAS" + $config[0] + ",bds.ad"
    $nwUser = "bds\" + $config[2]
    $protectedPath = "T:\" + $config[1] + "\ProtectedFolder"
    
    $securePassword = Get-Content -Path (Join-Path $ConfigPath ($config[2] + ".dat")) | ConvertTo-SecureString

    # Create a PSCredential object
    $credential = New-Object System.Management.Automation.PSCredential ($nwUser, $securePassword)

    # Use Invoke-Command to run the command on the remote server    $result = Invoke-Command -ComputerName $schedFQDN -Credential $credential -ScriptBlock {
        param($Path)
        # Define the path where you want to list the directories
        Get-ChildItem -Path $Path -Directory | Select-Object -ExpandProperty Name
    } -ArgumentList $protectedPath

    # Add the result to the InBoxQueue hashtable
    $InBoxes[$config[0]] = $result
}




# Assuming $InBoxes is already populated by the previous script

# Convert all results to an HTML table with conditional coloring
$htmlTableRows = $InBoxes.GetEnumerator() | ForEach-Object {
    if ($_.Value.Count -gt 30) {
        # If more than 30 files, highlight in red
        $row = "<tr><td>$($_.Key)</td><td style='color: red;'>$($_.Value.Count)</td></tr>"
    } else {
        # If 30 or fewer files, highlight in green
        $row = "<tr><td>$($_.Key)</td><td style='color: green;'>$($_.Value.Count)</td></tr>"
    }
    return $row
} | Out-String

$htmlTable = "<table><tr><th>Scheduler Server</th><th>Size Of Queue</th></tr>$htmlTableRows</table>"

# Now, $htmlTable contains an HTML string that can be used in an email body
$emailBody = @"
<html>
<head>
<style>
table {
  width: 100%;
  border-collapse: collapse;
}
table, td, th {
  border: 1px solid black;
}
th {
  height: 50px;
}
th, td {
  padding: 15px;
  text-align: left;
}
</style>
</head>
<body>
<h2>Directory Report</h2>
<p>Below is the number of files in each configuration's directory:</p>
$htmlTable
</body>
</html>
"@

# The $emailBody variable can now be used as the body of an email message




